#!/bin/bash

# WireGuard安装配置脚本
# 适用于常见Linux发行版
# 需要root权限运行

# 检查是否有root权限
if [ "$(id -u)" -ne 0 ]; then
    echo "请使用root权限运行此脚本" >&2
    exit 1
fi

# 定义颜色输出
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${GREEN}========== WireGuard 安装配置脚本 ==========${NC}"

# 检测发行版
echo -e "${YELLOW}[*] 检测操作系统发行版...${NC}"
OS=""
VER=""

if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$NAME
    VER=$VERSION_ID
elif [ -f /etc/debian_version ]; then
    OS="Debian GNU/Linux"
    VER=$(cat /etc/debian_version | cut -d '.' -f 1)
elif [ -f /etc/redhat-release ]; then
    if grep -q "CentOS" /etc/redhat-release; then
        OS="CentOS Linux"
        VER=$(grep -oP "[0-9]+" /etc/redhat-release | head -1)
    elif grep -q "Rocky Linux" /etc/redhat-release; then
        OS="Rocky Linux"
        VER=$(grep -oP "[0-9]+" /etc/redhat-release | head -1)
    elif grep -q "AlmaLinux" /etc/redhat-release; then
        OS="AlmaLinux"
        VER=$(grep -oP "[0-9]+" /etc/redhat-release | head -1)
    else
        OS="Red Hat Enterprise Linux"
        VER=$(grep -oP "[0-9]+" /etc/redhat-release | head -1)
    fi
elif [ -f /etc/fedora-release ]; then
    OS="Fedora Linux"
    VER=$(grep -oP "[0-9]+" /etc/fedora-release | head -1)
elif [ -f /etc/arch-release ]; then
    OS="Arch Linux"
    VER=""
fi

if [ -z "$OS" ]; then
    echo -e "${RED}[!] 无法识别操作系统发行版${NC}"
    exit 1
fi

echo -e "${GREEN}[+] 检测到: ${OS} ${VER}${NC}"

# 检查必要命令是否存在
check_command() {
    if ! command -v "$1" &> /dev/null; then
        echo -e "${YELLOW}[*] 缺少 $1 命令，将尝试安装...${NC}"
        return 1
    fi
    return 0
}

# 安装前准备
echo -e "${YELLOW}[*] 准备系统环境...${NC}"

# 检查必要命令
for cmd in "curl" "qrencode" "wg"; do
    if ! check_command $cmd; then
        case $OS in
            "Ubuntu" | "Debian GNU/Linux")
                apt install -y $cmd
                ;;
            "CentOS Linux" | "Rocky Linux" | "AlmaLinux" | "Red Hat Enterprise Linux")
                yum install -y $cmd
                ;;
            "Fedora Linux")
                dnf install -y $cmd
                ;;
            "Arch Linux")
                pacman -S --noconfirm $cmd
                ;;
        esac
    fi
done

# 安装依赖
case $OS in
    "Ubuntu" | "Debian GNU/Linux")
        apt update
        apt install -y software-properties-common
        add-apt-repository -y ppa:wireguard/wireguard
        apt update
        ;;
    "CentOS Linux" | "Rocky Linux" | "AlmaLinux" | "Red Hat Enterprise Linux")
        if [ "$OS" = "CentOS Linux" ] && [ "$VER" -eq 7 ]; then
            yum install -y epel-release
        fi
        ;;
    "Fedora Linux")
        ;;
    "Arch Linux")
        ;;
    *)
        echo -e "${RED}[!] 不支持的发行版: ${OS}${NC}"
        exit 1
        ;;
esac

# 安装WireGuard
echo -e "${YELLOW}[*] 正在安装WireGuard...${NC}"
INSTALL_SUCCESS=false

case $OS in
    "Ubuntu" | "Debian GNU/Linux")
        apt install -y wireguard qrencode
        if [ $? -eq 0 ]; then
            INSTALL_SUCCESS=true
        fi
        ;;
    "CentOS Linux" | "Rocky Linux" | "AlmaLinux" | "Red Hat Enterprise Linux")
        if [ "$OS" = "CentOS Linux" ] && [ "$VER" -eq 7 ]; then
            yum install -y elrepo-release
            yum --enablerepo=elrepo-kernel install -y kmod-wireguard wireguard-tools qrencode
        else
            dnf install -y wireguard-tools qrencode
        fi
        if [ $? -eq 0 ]; then
            INSTALL_SUCCESS=true
        fi
        ;;
    "Fedora Linux")
        dnf install -y wireguard-tools qrencode
        if [ $? -eq 0 ]; then
            INSTALL_SUCCESS=true
        fi
        ;;
    "Arch Linux")
        INSTALL_SUCCESS=true
        ;;
esac

if [ "$INSTALL_SUCCESS" = false ]; then
    echo -e "${RED}[!] WireGuard安装失败${NC}"
    exit 1
fi

echo -e "${GREEN}[+] WireGuard安装成功${NC}"

# 配置网络转发
echo -e "${YELLOW}[*] 配置网络转发...${NC}"
WG_CONF_DIR="/etc/sysctl.d"
WG_SYSCTL="${WG_CONF_DIR}/wg.conf"

# 确保目录存在
mkdir -p $WG_CONF_DIR

echo "net.ipv4.ip_forward = 1" > $WG_SYSCTL
echo "net.ipv6.conf.all.forwarding = 1" >> $WG_SYSCTL
sysctl -p $WG_SYSCTL

if [ $? -ne 0 ]; then
    echo -e "${RED}[!] 网络转发配置失败${NC}"
else
    echo -e "${GREEN}[+] 网络转发已启用${NC}"
fi

# 获取可用的网络接口和IP地址
echo -e "${YELLOW}[*] 检测可用的网络接口和IP地址...${NC}"
INTERFACES=$(ip -o -4 addr show | awk '{print $2 " " $4}' | grep -v "127.0.0.1")

if [ -z "$INTERFACES" ]; then
    echo -e "${RED}[!] 未找到可用的网络接口${NC}"
    exit 1
fi

echo -e "${GREEN}[+] 可用的网络接口和IP地址:${NC}"
echo "$INTERFACES" | nl -w1 -s ') '

# 让用户选择接口IP
echo -e "${YELLOW}[*] 请选择用于WireGuard的接口IP${NC}"
read -p "输入编号选择 [1-$(echo "$INTERFACES" | wc -l)]: " INTERFACE_IDX

# 验证用户输入
if ! [[ "$INTERFACE_IDX" =~ ^[0-9]+$ && "$INTERFACE_IDX" -ge 1 && "$INTERFACE_IDX" -le $(echo "$INTERFACES" | wc -l) ]]; then
    echo -e "${RED}[!] 无效的选择${NC}"
    exit 1
fi

# 获取用户选择的IP
SERVER_IP=$(echo "$INTERFACES" | sed -n "${INTERFACE_IDX}p" | awk '{print $2}' | cut -d '/' -f 1)
INTERFACE=$(echo "$INTERFACES" | sed -n "${INTERFACE_IDX}p" | awk '{print $1}')

echo -e "${GREEN}[+] 已选择: ${INTERFACE} (${SERVER_IP})${NC}"

# 配置端口
echo -e "${YELLOW}[*] 配置WireGuard端口...${NC}"
SERVER_PORT=51820
while true; do
    read -p "请输入WireGuard监听端口 [默认: 51820]: " input_port
    if [ -z "$input_port" ]; then
        break
    fi
    if [[ $input_port =~ ^[0-9]+$ && $input_port -ge 1 && $input_port -le 65535 ]]; then
        SERVER_PORT=$input_port
        break
    else
        echo -e "${RED}[!] 请输入1-65535之间的有效端口号${NC}"
    fi
done

# 配置客户端信息
echo -e "${YELLOW}[*] 配置客户端信息...${NC}"
CLIENT_NAME="client"
read -p "请输入客户端名称 [默认: client]: " input_client
if [ ! -z "$input_client" ]; then
    CLIENT_NAME=$input_client
fi

# 生成密钥
echo -e "${YELLOW}[*] 生成WireGuard密钥...${NC}"
umask 077
PRIVATE_KEY=$(wg genkey)
PUBLIC_KEY=$(echo "$PRIVATE_KEY" | wg pubkey)
umask 022

# 生成客户端密钥
CLIENT_PRIVATE_KEY=$(wg genkey)
CLIENT_PUBLIC_KEY=$(echo "$CLIENT_PRIVATE_KEY" | wg pubkey)
CLIENT_IP="10.0.0.2/32"

# 确定出口网络接口
echo -e "${YELLOW}[*] 检测出口网络接口...${NC}"
# 优先使用IPv4默认路由接口
EXIT_INTERFACE=$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\S+)' | head -1)
if [ -z "$EXIT_INTERFACE" ]; then
    # 备用方案
    EXIT_INTERFACE=$(ip route get 8.8.8.8 | awk '{print $5}' | head -1)
fi

if [ -z "$EXIT_INTERFACE" ]; then
    echo -e "${YELLOW}[!] 无法自动检测出口接口，请手动输入${NC}"
    read -p "请输入出口网络接口 (如 eth0): " input_interface
    if [ -z "$input_interface" ]; then
        echo -e "${RED}[!] 出口接口不能为空${NC}"
        exit 1
    fi
    EXIT_INTERFACE=$input_interface
fi

echo -e "${GREEN}[+] 出口网络接口: ${EXIT_INTERFACE}${NC}"

# 创建WireGuard配置
echo -e "${YELLOW}[*] 创建WireGuard配置...${NC}"
WG_DIR="/etc/wireguard"
WG_CONFIG="${WG_DIR}/wg0.conf"
mkdir -p $WG_DIR
chmod 700 $WG_DIR

# 创建服务器配置文件
cat > $WG_CONFIG << EOF
[Interface]
Address = 10.0.0.1/24
ListenPort = $SERVER_PORT
PrivateKey = $PRIVATE_KEY
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o $EXIT_INTERFACE -j MASQUERADE; ip6tables -A FORWARD -i %i -j ACCEPT; ip6tables -t nat -A POSTROUTING -o $EXIT_INTERFACE -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o $EXIT_INTERFACE -j MASQUERADE; ip6tables -D FORWARD -i %i -j ACCEPT; ip6tables -t nat -D POSTROUTING -o $EXIT_INTERFACE -j MASQUERADE

[Peer]
PublicKey = $CLIENT_PUBLIC_KEY
AllowedIPs = $CLIENT_IP
EOF

chmod 600 $WG_CONFIG

# 创建客户端配置文件
CLIENT_CONFIG="${WG_DIR}/${CLIENT_NAME}.conf"
cat > $CLIENT_CONFIG << EOF
[Interface]
PrivateKey = $CLIENT_PRIVATE_KEY
Address = $CLIENT_IP
DNS = 8.8.8.8, 8.8.4.4

[Peer]
PublicKey = $PUBLIC_KEY
Endpoint = $SERVER_IP:$SERVER_PORT
AllowedIPs = 0.0.0.0/0, ::/0
PersistentKeepalive = 25
EOF

chmod 600 $CLIENT_CONFIG

echo -e "${GREEN}[+] WireGuard配置完成${NC}"

# 配置防火墙
echo -e "${YELLOW}[*] 配置防火墙...${NC}"
FIREWALL_CONFIGURED=false

# 检查是否存在防火墙管理程序并优先使用
if command -v ufw &>/dev/null && systemctl is-active --quiet ufw; then
    echo -e "${YELLOW}[*] 发现ufw防火墙，使用ufw配置...${NC}"
    ufw allow $SERVER_PORT/udp
    ufw allow OpenSSH  # 确保SSH不被封锁
    ufw reload
    FIREWALL_CONFIGURED=true
    echo -e "${GREEN}[+] ufw防火墙配置完成${NC}"
elif command -v firewalld &>/dev/null && systemctl is-active --quiet firewalld; then
    echo -e "${YELLOW}[*] 发现firewalld，使用firewalld配置...${NC}"
    firewall-cmd --permanent --add-port=$SERVER_PORT/udp
    firewall-cmd --permanent --add-masquerade
    firewall-cmd --reload
    FIREWALL_CONFIGURED=true
    echo -e "${GREEN}[+] firewalld配置完成${NC}"
elif command -v nft &>/dev/null; then
    echo -e "${YELLOW}[*] 发现nftables，使用nftables配置...${NC}"
    NFT_CONF="/etc/nftables.conf"
    if [ -f "$NFT_CONF" ]; then
        # 备份原文件
        cp "$NFT_CONF" "$NFT_CONF.bak"
        echo -e "${YELLOW}[*] 已备份nftables配置到 ${NFT_CONF}.bak${NC}"
        
        # 检查是否有filter表
        HAS_FILTER_TABLE=$(nft list tables | grep -i "inet filter")
        if [ -n "$HAS_FILTER_TABLE" ]; then
            # 检查是否已有WireGuard规则
            HAS_WG_RULE=$(nft list ruleset | grep -i "udp dport $SERVER_PORT accept")
            if [ -z "$HAS_WG_RULE" ]; then
                # 添加WireGuard规则到现有filter表
                nft insert rule inet filter input udp dport $SERVER_PORT accept
            fi
        else
            # 创建新的filter表并添加规则
            nft add table inet filter
            nft add chain inet filter input { type filter hook input priority 0; policy drop; }
            nft insert rule inet filter input udp dport $SERVER_PORT accept
            nft insert rule inet filter input iifname "wg0" accept
            nft insert rule inet filter input ct state established,related accept
        fi
        
        # 保存规则
        nft list ruleset > "$NFT_CONF"
        FIREWALL_CONFIGURED=true
        echo -e "${GREEN}[+] nftables配置完成${NC}"
    else
        echo -e "${YELLOW}[!] 未找到nftables配置文件，使用iptables配置...${NC}"
    fi
fi

# 如果没有防火墙管理程序，使用iptables
if [ "$FIREWALL_CONFIGURED" = false ]; then
    echo -e "${YELLOW}[*] 使用iptables配置防火墙...${NC}"
    iptables -A INPUT -p udp --dport $SERVER_PORT -j ACCEPT
    iptables -A FORWARD -i wg0 -j ACCEPT
    iptables -A FORWARD -o wg0 -j ACCEPT
    iptables -t nat -A POSTROUTING -o $EXIT_INTERFACE -j MASQUERADE
    
    # 保存规则
    if command -v netfilter-persistent &>/dev/null; then
        netfilter-persistent save
        echo -e "${GREEN}[+] iptables规则已保存到netfilter-persistent${NC}"
    elif command -v iptables-save &>/dev/null; then
        iptables-save > /etc/iptables/rules.v4
        ip6tables-save > /etc/iptables/rules.v6
        echo -e "${GREEN}[+] iptables规则已保存到/etc/iptables${NC}"
    else
        echo -e "${YELLOW}[!] 无法自动保存iptables规则，请手动保存${NC}"
    fi
    
    echo -e "${GREEN}[+] iptables配置完成${NC}"
fi

# 启用并启动WireGuard服务
echo -e "${YELLOW}[*] 启用并启动WireGuard服务...${NC}"
systemctl enable wg-quick@wg0
systemctl start wg-quick@wg0

if [ $? -ne 0 ]; then
    echo -e "${RED}[!] WireGuard服务启动失败，检查配置...${NC}"
    # 验证配置文件
    wg checkconf $WG_CONFIG
    if [ $? -ne 0 ]; then
        echo -e "${RED}[!] WireGuard配置文件有误，请检查${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}[*] 尝试重新加载模块...${NC}"
    modprobe wireguard
    systemctl start wg-quick@wg0
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}[!] WireGuard服务仍然无法启动，请检查系统日志${NC}"
        journalctl -u wg-quick@wg0
        exit 1
    fi
fi

echo -e "${GREEN}[+] WireGuard服务已启动${NC}"

# 生成wgui监控服务（配置修改自动重载）
echo -e "${YELLOW}[*] 配置配置文件监控服务...${NC}"
cd /etc/systemd/system/

cat << EOF > wgui.service
[Unit]
Description=Reload WireGuard on config change
After=network.target

[Service]
Type=oneshot
ExecStart=/usr/bin/wg-quick reload wg0
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

cat << EOF > wgui.path
[Unit]
Description=Watch /etc/wireguard/wg0.conf for changes

[Path]
PathModified=/etc/wireguard/wg0.conf

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable wgui.{path,service}
systemctl start wgui.{path,service}

# 显示配置信息
echo -e "${GREEN}========== WireGuard配置信息 ==========${NC}"
echo -e "${GREEN}[+] 服务器公钥:${NC} $PUBLIC_KEY"
echo -e "${GREEN}[+] 服务器监听IP和端口:${NC} $SERVER_IP:$SERVER_PORT"
echo -e "${GREEN}[+] 客户端配置文件:${NC} $CLIENT_CONFIG"
echo -e "${GREEN}[+] QR码:${NC}"
qrencode -t ansiutf8 < $CLIENT_CONFIG

echo -e "${GREEN}========== 安装完成 ==========${NC}"
echo -e "${GREEN}[+] WireGuard已成功安装并配置${NC}"
echo -e "${GREEN}[+] 客户端配置文件位置: ${CLIENT_CONFIG}${NC}"
echo -e "${GREEN}[+] 可以将此配置文件导入到WireGuard客户端应用中${NC}"
echo -e "${YELLOW}[*] 提示: 如需添加更多客户端，可使用wg set wg0 peer $CLIENT_PUBLIC_KEY allowed-ips <新IP> 命令${NC}"
